mean(1:10)
stopwords("SMART")
head(comcast.clean)
head(comcast.clean)
comcast.clean
head(comcast.polar)
head(polar.doc.mat)
(polar.doc.mat)
dim(polar.doc.mat)
head(polar.doc.mat)
dim(polar.corpus)
class(polar.corpus)
polar.corpus
install.packages("flexclust")
dim(comcast.doc.mat)
comcast.doc.mat[1:10, 1:10]
2
data("Nclus")
plot(Nclus)

cl1 = kcca(Nclus, k=4)
cl1

image(cl1)
points(Nclus)
plot(Nclus)
data("Nclus")
plot(Nclus)

cl1 = kcca(Nclus, k=4)
cl1

image(cl1)
points(Nclus)
head(comcast.polar)
class(polar.df)
head(comcast.polar)
head(comcast.polar)
class(comcast.polar)
head(polar.df)
head(polar.df)
class(comcast.polar)
q()
n
2
comcast.list[[1]]
comcast.list[1]
str(comcast.list)
help(wordcloud)
classify_polarity("I hate this")
classify_polarity("I love this")
head(comcast.df)
class(comcast.df$created)
class(as.Date(comcast.df$created))
2
stopwords()
stopwords("SMART")
foo <- data.frame(x = 1:3, y = 4:6)
foo
rbind(foo, NULL)
"foo bar http://bar.io" %>% sapply(function(i) gsub("\\bhttps*://.+\\b", "", i))
get.text(comcast.df[1,])
comcast.df[1,]$text
comcast.df[1,]$created
as.Date(comcast.df[1,]$created)
tuple <- comcast.df[1,]
Emit(Tuple(data.frame(foo = "bar")))
get.text(comcast.df[1,])
tuple
tuple <- Tuple(data.frame(text = text,
                          timestamp = timestamp))
tuple
Emit()
Emit(Tuple(data.frame(x = 3))))
Emit(Tuple(data.frame(x = 3)))
Emit
SplitSentence <- function(tuple, ...)
{
words <- unlist(
strsplit(as.character(
tuple$sentence), " "
))
for (word in words)
Emit(Tuple(
data.frame(word = word)),
...)
}
CountWord <- function(tuple, ...) {
words <- GetHash("wordcount")
if (tuple$word %in% words$word) {
words[words$word == tuple$word,]
$count <-
words[words$word == tuple$word,]
$count + 1
} else { # If the word does not exist
words <- rbind(words, data.frame(
word = tuple$word, count = 1))
}
SetHash("wordcount", words)
}
SplitSentence <- function(tuple, ...) {
words <- unlist(
strsplit(as.character(
tuple$sentence), " "
))
for (word in words)
Emit(Tuple(
data.frame(word = word)),
...)
}
topology <- Topology(sentences)
topology <- AddBolt(
topology, Bolt(
SplitSentence, listen = 0
)
)
topology <- AddBolt(
topology, Bolt(
CountWord, listen = 1
)
)
topology <- Topology(sentences)
topology <- AddBolt(
topology, Bolt(
SplitSentence, listen = 0
)
)
topology <- AddBolt(
topology, Bolt(
CountWord, listen = 1
)
)
data(sentences)
topology <- Topology(sentences)
topology <- AddBolt(
topology, Bolt(
SplitSentence, listen = 0
)
)
topology <- AddBolt(
topology, Bolt(
CountWord, listen = 1
)
)
head(counts)
topo
tuple <- sentences[1]
tuple
tuple <- sentences[1,]
tuple
SplitSentence(tuple)
RStorm(topology)
foo <- df
bar <- rbind(data.frame(baz = 3, quux = 4))
bar
topo
topology
foo <- data.frame(a = 1, abc = 2)
foo$a
foo
foo <- list(a = 1, abc = 2)
foo$a
tuple
tuple <- comcast.df[1,]
get.text(tuple)
topo
get.text(comcast.df[1,])
get.text(comcast.df[1,]) %>% strip.text
get.text(comcast.df[1,]) %>% strip.text %>% strip.stopwords
get.text(comcast.df[1,]) %>% strip.text %>% strip.stopwords
get.text(comcast.df[1,]) %>% strip.text %>% strip.stopwords
as.integer("foo")
RStorm(topo)
tuple <- comcast.df[1,]
dim(data.frame(text = text,
                          t.stamp = t.stamp))
RStorm(topo)
RStorm(topo)
head(foo)
nrow(foo)
nrow(na.omit(foo))
head(foo)
strsplit("foo bar", " ")
1:5 %>% mean(trim = 1)
topo
topo
topo
topo
head(foo)
l.polar
help(Corpus)
meta(polar.corpus)
l.polar
head(foo$t.stamp)
summary(foo$t.stamp)
class(foo$t.stamp)
mean(foo$polarity)
bar <- head(foo$polarity)
bar
bar == "positive"
bar == "positive"
is.pos <- bar == "positive"
mean(is.pos)
tweet.df <- head(foo)
polar.df
prop.positive
prop.positive
head(prop.df)
result
tweet.df
polar.df
prop.df
tweet.df <- head(foo)[1,]
tweet.df
polar.df
tweet.df <- foo
help(colMeans)
head(polar.df)
prop.df
prop.df
help(colMeans)
dim(foo)
head(foo)
tweet.df <- foo
dim(tweet.df)
prop.df
polar.mat
prop.df
polar.mat
polar.mat
polar.mat
prop.df
prop.df
result
prop.df
prop.df
prop.df
result
topo2
tweet.df <- foo[1:50,]
prop.df
tweet.df <- foo[1:49,]
prop.df
prop.df
prop.mat
prop.df
prop.df
prop.df.long
class(foo$t.stamp)
tt <- foo$t.stamp[1]
tt
tt - 60
min(foo$t.stamp)
bar <- 1:10
length(bar < 5)
tuple
t.stamp.current <- tuple$created
t.stamp.current
t.stamp.past
head(tpm.df)
foo$t.stamp
as.matrix(foo$t.stamp)
rev(foo)
help(rev)
comcast.df$created
comcast.df$created
tpm.df
q()
y
dim(comcast.results)
dim(comcast.results)
summary(word.vec)
sort(table(word.vec))
brewer.pal
warnings()
q()
n
q()
n
t.stamp.df <- comcast.df[1:200,]$created
t.stamp.df
class(t.stamp.df)
as.data.frame(t.stamp.df)
t.stamp.df <- as.data.frame(t.stamp.df)
t.stamp <- comcast.df[1:200,]$created
t.stamp.df <- as.data.frame(t.stamp)
head(t.stamp.df)
head(t.stamp.df$t.stamp))
t.stamp.past <- t.stamp.df$t.stamp
length(t.stamp.pas)
length(t.stamp.past)
length(c(TRUE, TRUE, FALSE, FALSE)
)
t.stamp.past
t.stamp.past <- t.stamp.df$t.stamp[1:5]
t.stamp.past
t.stamp <- t.stamp.past[5]
t.stamp
last.min
tpm
warnings()
getTrack("tpm.df", results)
GetTrack("tpm.df", results)
GetTrack("tpm.df", result)
GetTrack("tpm.df", result)
system.time(result <- RStorm(topo))
system.time(result <- RStorm(topo))
GetTrack("tpm.df", result)
foo <- data.frame()
foo$bar <- 3
foo[1,] <- 3
foo
foo <- data.frame()
foo[3,]$bar <- 2
foo <- 
bar
foo
bar
GetHash("words.df", result)
topo
result
GetHash("words.df", result)
GetHash("words.df", result)
GetHash("words.df", result)
result
topo
words <- c()
words <- c(NA, NA)
words
length(words)
result
GetHash("words.df", result)
words <- c("foo", "bar", "baz", "foo")
words.df <- data.frame()
words.df <- data.frame()
words.df <- data.frame()
words.df
words
words.df
foo <- " "
unlist(strsplit(foo, " "))
foo <- "  "
unlist(strsplit(foo, " "))
foo <- "for by against"
removeWords(foo, stopwords("SMART"))
strsplit(removeWords(foo, stopwords("SMART")), " ")
unlist(strsplit(removeWords(foo, stopwords("SMART")), " "))
unlist(strsplit(removeWords(foo, stopwords("SMART")), " ")) != ""
5 %>% rnorm(1, .)
removeWords(foo, stopwords("SMART")) %>% gsub("[[:space:]]", " ", .)
removeWords(foo, stopwords("SMART")) %>% gsub("[[:space:]]*", " ", .)
GetTrack("text")
GetTrack("text", result)
text$text
(GetTrack("text", result))$text
(GetTrack("text", result))$text
(GetTrack("text", result))[1,]
(GetTrack("text", result))
(GetTrack("text", result))
c("foo bar baz") %>% gsub("[[:space:]]*", " ")
c("foo bar baz") %>% gsub("[[:space:]]*", " ", .)
c("foo bar baz") %>% gsub("[[:space:]]+", " ", .)
c("foo bar      baz") %>% gsub("[[:space:]]+", " ", .)
(GetTrack("text", result))
(GetTrack("text", result))
(GetTrack("text", result))
(GetTrack("text", result))
(GetTrack("text", result))[1,]
as.character(GetTrack("text", result))[1,]
as.character(GetTrack("text", result)[1,])
GetHast("words.df")
GetHash("words.df")
wordcloud(GetHash("words.df"))
words
words
words
words
counts
counts
ls()
help(comparison.cloud)
help(TermDocumentMatrix)
help(Corpus)
help(wordcloud)
help(VectorSource)
positive <- list(word.vec = letters[1:5])
positive
negative <- list(word.vec = letters[6:10])
neutral <- list(word.vec = letter[11:12])
neutral <- list(word.vec = letters[11:12])
netative
negative
neutral
data.frame(positive = positive, negative = negative, neutral = neutral)
polarity <- "positive"
polar.list <- list(positive = letters[1:3], neutral = letters[4:10],
  negative = letters[11:12])
polar.list
as.matrix(polar.list)
as.data.frame(as.matrix(polar.list))
foo <- as.data.frame(as.matrix(polar.list))
foo['positive',]
unlist(foo['positive',])
foo["bar",]
is.na(foo["bar",])
is.null(foo["bar",])
is.vector(foo["bar",])
is.vector(foo["positive",])
is.vector(foo[polarity,])
unlist(foo)
as.matrix(list(bar = 1:5))
baz <- data.frame()
baz['quux',]
is.vector(baz['quux',])
is.vector(foo['quux',])
foo
foo['quux',]
is.empty(foo['quux',])
length((foo['quux',]))
is.na((foo['quux',]))
is.null((foo['quux',]))
exists(asdf)
foo['quux',]
rownames(foo)
rownames(baz)
foo["positive",]
append(foo["positive",], 4)
append(foo["positive",][[1]], 4)
append(foo["negative",][[1]], 4)
eval(polarity)
baz
rbind(baz, as.matrix(list(polarity = 1:5)))
rbind(baz, as.matrix(list(eval(polarity) = 1:5)))
rbind(baz, as.matrix(list(eval(polarity) = 1:5)))
word.list <- list(1:5)
names(word.list) <- eval(polarity)
word.list
topo
result
topo
warnings()
fo
foo
polarity <- "bar"
baz <- 1:5
baz <- list(1:5)
baz
as.matrix(baz)
names(baz) <- eval(polarity)
baz
as.matrix(baz)
rbind(foo, as.matrix(baz))
polarity %in% rownames(foo)
polar.words.df <- foo
words <- letters[1:5]
words
polar.words.df[polarity,]
polar.words.df
polarity
polarity <- "positive"
polar.words.df
polar.words.df <- foo
polar.words.df[polarity,]
polar.words.df[polarity,][[1]]
polar.words.df <- foo
class(polar.words.df[polarity,][[1]])
class(append(polar.words.df[polarity,][[1]], words))
polar.words.df
polar.words.df[polarity,]
rownames(polar.words.df)
polar.words.df
classify_polarity("foo bar baz")
classify_polarity("a the for")
classify_polarity("frank")
classify_polarity("theodore")
classify_polarity("a")
classify_polarity("sadfj")
classify_polarity("the")
GetHash("polarity.df", results)
GetHash("polarity.df", result)
words
words <- words[1:5]
words
polarity <- "positive"
polar.words.df
word.list
words
list(words)
rownames(polar.words.df)
by.polar
by.polar
q()
n
topo
results
result
q()
n
q()
n
