1
dim(comcast.df)
summary(comcast.df$time)
summary(comcast.df$created)
q()
n
1
head(comcast.text)
head(comcast.clean)
head(comcast.clean)
head(comcast.clean)
head(comcast.clean)
1:10 %>% mean
mean(1:10)
stopwords("SMART")
head(comcast.clean)
head(comcast.clean)
comcast.clean
head(comcast.polar)
head(polar.doc.mat)
(polar.doc.mat)
dim(polar.doc.mat)
head(polar.doc.mat)
dim(polar.corpus)
class(polar.corpus)
polar.corpus
install.packages("flexclust")
dim(comcast.doc.mat)
comcast.doc.mat[1:10, 1:10]
2
data("Nclus")
plot(Nclus)

cl1 = kcca(Nclus, k=4)
cl1

image(cl1)
points(Nclus)
plot(Nclus)
data("Nclus")
plot(Nclus)

cl1 = kcca(Nclus, k=4)
cl1

image(cl1)
points(Nclus)
head(comcast.polar)
class(polar.df)
head(comcast.polar)
head(comcast.polar)
class(comcast.polar)
head(polar.df)
head(polar.df)
class(comcast.polar)
q()
n
2
comcast.list[[1]]
comcast.list[1]
str(comcast.list)
help(wordcloud)
classify_polarity("I hate this")
classify_polarity("I love this")
head(comcast.df)
class(comcast.df$created)
class(as.Date(comcast.df$created))
2
stopwords()
stopwords("SMART")
foo <- data.frame(x = 1:3, y = 4:6)
foo
rbind(foo, NULL)
"foo bar http://bar.io" %>% sapply(function(i) gsub("\\bhttps*://.+\\b", "", i))
get.text(comcast.df[1,])
comcast.df[1,]$text
comcast.df[1,]$created
as.Date(comcast.df[1,]$created)
tuple <- comcast.df[1,]
Emit(Tuple(data.frame(foo = "bar")))
get.text(comcast.df[1,])
tuple
tuple <- Tuple(data.frame(text = text,
                          timestamp = timestamp))
tuple
Emit()
Emit(Tuple(data.frame(x = 3))))
Emit(Tuple(data.frame(x = 3)))
Emit
SplitSentence <- function(tuple, ...)
{
words <- unlist(
strsplit(as.character(
tuple$sentence), " "
))
for (word in words)
Emit(Tuple(
data.frame(word = word)),
...)
}
CountWord <- function(tuple, ...) {
words <- GetHash("wordcount")
if (tuple$word %in% words$word) {
words[words$word == tuple$word,]
$count <-
words[words$word == tuple$word,]
$count + 1
} else { # If the word does not exist
words <- rbind(words, data.frame(
word = tuple$word, count = 1))
}
SetHash("wordcount", words)
}
SplitSentence <- function(tuple, ...) {
words <- unlist(
strsplit(as.character(
tuple$sentence), " "
))
for (word in words)
Emit(Tuple(
data.frame(word = word)),
...)
}
topology <- Topology(sentences)
topology <- AddBolt(
topology, Bolt(
SplitSentence, listen = 0
)
)
topology <- AddBolt(
topology, Bolt(
CountWord, listen = 1
)
)
topology <- Topology(sentences)
topology <- AddBolt(
topology, Bolt(
SplitSentence, listen = 0
)
)
topology <- AddBolt(
topology, Bolt(
CountWord, listen = 1
)
)
data(sentences)
topology <- Topology(sentences)
topology <- AddBolt(
topology, Bolt(
SplitSentence, listen = 0
)
)
topology <- AddBolt(
topology, Bolt(
CountWord, listen = 1
)
)
head(counts)
topo
tuple <- sentences[1]
tuple
tuple <- sentences[1,]
tuple
SplitSentence(tuple)
RStorm(topology)
foo <- df
bar <- rbind(data.frame(baz = 3, quux = 4))
bar
topo
topology
foo <- data.frame(a = 1, abc = 2)
foo$a
foo
foo <- list(a = 1, abc = 2)
foo$a
tuple
tuple <- comcast.df[1,]
get.text(tuple)
topo
get.text(comcast.df[1,])
get.text(comcast.df[1,]) %>% strip.text
get.text(comcast.df[1,]) %>% strip.text %>% strip.stopwords
get.text(comcast.df[1,]) %>% strip.text %>% strip.stopwords
get.text(comcast.df[1,]) %>% strip.text %>% strip.stopwords
as.integer("foo")
RStorm(topo)
tuple <- comcast.df[1,]
dim(data.frame(text = text,
                          t.stamp = t.stamp))
RStorm(topo)
RStorm(topo)
head(foo)
nrow(foo)
nrow(na.omit(foo))
head(foo)
strsplit("foo bar", " ")
1:5 %>% mean(trim = 1)
topo
topo
topo
topo
head(foo)
l.polar
help(Corpus)
meta(polar.corpus)
l.polar
head(foo$t.stamp)
summary(foo$t.stamp)
class(foo$t.stamp)
mean(foo$polarity)
bar <- head(foo$polarity)
bar
bar == "positive"
bar == "positive"
is.pos <- bar == "positive"
mean(is.pos)
tweet.df <- head(foo)
polar.df
prop.positive
prop.positive
head(prop.df)
result
tweet.df
polar.df
prop.df
tweet.df <- head(foo)[1,]
tweet.df
polar.df
tweet.df <- foo
help(colMeans)
head(polar.df)
prop.df
prop.df
help(colMeans)
dim(foo)
head(foo)
tweet.df <- foo
dim(tweet.df)
prop.df
polar.mat
prop.df
polar.mat
polar.mat
polar.mat
prop.df
prop.df
result
prop.df
prop.df
prop.df
result
topo2
tweet.df <- foo[1:50,]
prop.df
tweet.df <- foo[1:49,]
prop.df
prop.df
prop.mat
prop.df
prop.df
prop.df.long
class(foo$t.stamp)
tt <- foo$t.stamp[1]
tt
tt - 60
min(foo$t.stamp)
bar <- 1:10
length(bar < 5)
tuple
t.stamp.current <- tuple$created
t.stamp.current
t.stamp.past
head(tpm.df)
foo$t.stamp
as.matrix(foo$t.stamp)
rev(foo)
help(rev)
comcast.df$created
comcast.df$created
tpm.df
q()
y
dim(comcast.results)
dim(comcast.results)
summary(word.vec)
sort(table(word.vec))
brewer.pal
warnings()
q()
n
